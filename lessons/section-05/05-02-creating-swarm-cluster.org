* meta
** startups
//		#+STARTUP: hidestars	
#+SEQ_TODO: TODO(t!) START(s!) STUCK(k!) WAIT(w!) | DONE(d!) CANCEL(c!) DEFER(r!) ANSWER(n!)
#+PROPERTY: imp_ALL high medium low
#+PROPERTY: urg_ALL immediate shortterm longterm
#+PROPERTY: loc_ALL home office
#+COLUMNS: %imp %urg %loc
* Creating a Docker Swarm Cluster
** Introduction
 [Swarm mode]() is the orchestration feature built into Docker. It's a production-grade orchestrator which uses the familiar Docker Compose format to model applications.

 We'll create a Swarm cluster for this section and deploy some apps to get a feel for running containers in production. 

 If you plan on using a different orchestrator - like Kubernetes or Nomad - the patterns are the same, so what you learn here will still apply.
*** vagrant
 DockerForWindows and LearnDockerInAMonth both cover Docker Swarm but not using Vagrant.

https://www.vagrantup.com/downloads
downloaded Vagrant 2.2.16 64bit 
** Pre-reqs

We'll run multiple virtual machines to create a production-like cluster, so you'll need to install [[https://www.vagrantup.com/][Vagrant]] if you want to follow along.

The [Vagrantfile]() sets up four machines with Docker installed and ready to be joined into a cluster.

_Use Vagrant to create 3x Linux and 1x Windows VMs:_
$env:docker4dotnet='c:\cprojects\udemy\docker4.net'

```
cd "$env:docker4dotnet/vagrant/05"

vagrant up
```
*** problem with 'vagrant up'
**** trancript on //air
 PS C:\cprojects\udemy\docker4.net\vagrant\05> vagrant up
 Bringing machine 'manager' up with 'virtualbox' provider...
 Bringing machine 'worker' up with 'virtualbox' provider...
 Bringing machine 'worker2' up with 'virtualbox' provider...
 Bringing machine 'winworker' up with 'virtualbox' provider...
 ==> manager: Box 'bento/ubuntu-20.04' could not be found. Attempting to find and install...
     manager: Box Provider: virtualbox
     manager: Box Version: >= 0
 ==> manager: Loading metadata for box 'bento/ubuntu-20.04'
     manager: URL: https://vagrantcloud.com/bento/ubuntu-20.04
 ==> manager: Adding box 'bento/ubuntu-20.04' (v202105.25.0) for provider: virtualbox
     manager: Downloading: https://vagrantcloud.com/bento/boxes/ubuntu-20.04/versions/202105.25.0/providers/virtualbox.box
     manager:
 ==> manager: Successfully added box 'bento/ubuntu-20.04' (v202105.25.0) for 'virtualbox'!
 ==> manager: Importing base box 'bento/ubuntu-20.04'...
 ==> manager: Matching MAC address for NAT networking...
 ==> manager: Checking if box 'bento/ubuntu-20.04' version '202105.25.0' is up to date...
 ==> manager: Setting the name of the VM: manager
 Vagrant is currently configured to create VirtualBox synced folders with
 the `SharedFoldersEnableSymlinksCreate` option enabled. If the Vagrant
 guest is not trusted, you may want to disable this option. For more
 information on this option, please refer to the VirtualBox manual:

   https://www.virtualbox.org/manual/ch04.html#sharedfolders

 This option can be disabled globally with an environment variable:

   VAGRANT_DISABLE_VBOXSYMLINKCREATE=1

 or on a per folder basis within the Vagrantfile:

   config.vm.synced_folder '/host/path', '/guest/path', SharedFoldersEnableSymlinksCreate: false
 ==> manager: Vagrant has detected a configuration issue which exposes a
 ==> manager: vulnerability with the installed version of VirtualBox. The
 ==> manager: current guest is configured to use an E1000 NIC type for a
 ==> manager: network adapter which is vulnerable in this version of VirtualBox.
 ==> manager: Ensure the guest is trusted to use this configuration or update
 ==> manager: the NIC type using one of the methods below:
 ==> manager:
 ==> manager:   https://www.vagrantup.com/docs/virtualbox/configuration.html#default-nic-type
 ==> manager:   https://www.vagrantup.com/docs/virtualbox/networking.html#virtualbox-nic-type
 ==> manager: Clearing any previously set network interfaces...
 ==> manager: Preparing network interfaces based on configuration...
     manager: Adapter 1: nat
     manager: Adapter 2: hostonly
 ==> manager: Forwarding ports...
     manager: 22 (guest) => 2222 (host) (adapter 1)
 ==> manager: Running 'pre-boot' VM customizations...
 ==> manager: Booting VM...
 There was an error while executing `VBoxManage`, a CLI used by Vagrant
 for controlling VirtualBox. The command and stderr is shown below.

 Command: ["startvm", "24a2dc14-fa89-47eb-9381-847f7b25b513", "--type", "headless"]

 Stderr: VBoxManage.exe: error: VT-x is not available (VERR_VMX_NO_VMX)
 VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component ConsoleWrap, interface IConsole
**** uninstall virtualbox 5.2, installed vb 6.1
**** transcript on //air, same error even if running powershell as admin
 PS C:\cprojects\udemy\docker4.net\vagrant\05> vagrant up
 Bringing machine 'manager' up with 'virtualbox' provider...
 Bringing machine 'worker' up with 'virtualbox' provider...
 Bringing machine 'worker2' up with 'virtualbox' provider...
 Bringing machine 'winworker' up with 'virtualbox' provider...
 ==> manager: Checking if box 'bento/ubuntu-20.04' version '202105.25.0' is up to date...
 ==> manager: Clearing any previously set forwarded ports...
 ==> manager: Clearing any previously set network interfaces...
 ==> manager: Preparing network interfaces based on configuration...
     manager: Adapter 1: nat
     manager: Adapter 2: hostonly
 ==> manager: Forwarding ports...
     manager: 22 (guest) => 2222 (host) (adapter 1)
 ==> manager: Running 'pre-boot' VM customizations...
 ==> manager: Booting VM...
 There was an error while executing `VBoxManage`, a CLI used by Vagrant
 for controlling VirtualBox. The command and stderr is shown below.

 Command: ["startvm", "24a2dc14-fa89-47eb-9381-847f7b25b513", "--type", "headless"]

 Stderr: VBoxManage.exe: error: Failed to open/create the internal network 'HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter #2' (VERR_INTNET_FLT_IF_NOT_FOUND).
 VBoxManage.exe: error: Failed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND)
 VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component ConsoleWrap, interface IConsole
**** the diff is that for vb 6.1, VB can invoke on Win10
 https://www.tcg.com/blog/yes-you-can-run-docker-and-virtualbox-on-windows-10-home/
**** START S5L2 Problem with "vagrant up"
     - State "START"      from              [2021-06-07 Mon 10:53]
***** problem description
  I have been able to run all the examples as I follow the videos in Sections 1 to 4.
  In Section 5, Lecture 2, when I run "vagrant up" in the 05 folder, I get an error.

     > PS C:\cprojects\udemy\docker4.net\vagrant\05> vagrant up
     > Bringing machine 'manager' up with 'virtualbox' provider...
     > Bringing machine 'worker' up with 'virtualbox' provider...
     > Bringing machine 'worker2' up with 'virtualbox' provider...
     > Bringing machine 'winworker' up with 'virtualbox' provider...
     > ==> manager: Checking if box 'bento/ubuntu-20.04' version '202105.25.0' is up to date...
     > ==> manager: Clearing any previously set forwarded ports...
     > ==> manager: Clearing any previously set network interfaces...
     > ==> manager: Preparing network interfaces based on configuration...
     >     manager: Adapter 1: nat
     >     manager: Adapter 2: hostonly
     > ==> manager: Forwarding ports...
     >     manager: 22 (guest) => 2222 (host) (adapter 1)
     > ==> manager: Running 'pre-boot' VM customizations...
     > ==> manager: Booting VM...
     > There was an error while executing `VBoxManage`, a CLI used by Vagrant
     > for controlling VirtualBox. The command and stderr is shown below.
     > 
     > Command: ["startvm", "24a2dc14-fa89-47eb-9381-847f7b25b513", "--type", "headless"]
     > 
     > Stderr: VBoxManage.exe: error: Failed to open/create the internal network 'HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter #2' (VERR_INTNET_FLT_IF_NOT_FOUND).
     > VBoxManage.exe: error: Failed to attach the network LUN (VERR_INTNET_FLT_IF_NOT_FOUND)
     > VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component ConsoleWrap, interface IConsole
     > 
  If anyone knows what the problem is, thanks for your help in advance.

***** environment
 Windows 10 2004 with WSL2
 Vagrant 2.2.16
 VirtualBox 6.1

 I do not believe the problem has anything to do with docker but just in case, here are the versions
 c:\cprojects\pp\virtualization\docker>docker version
 docker version
 Client:
  Cloud integration: 1.0.14
  Version:           20.10.6
  API version:       1.41
  Go version:        go1.16.3
  Git commit:        370c289
  Built:             Fri Apr  9 22:49:36 2021
  OS/Arch:           windows/amd64
  Context:           default
  Experimental:      true

 Server: Docker Engine - Community
  Engine:
   Version:          20.10.6
   API version:      1.41 (minimum version 1.24)
   Go version:       go1.13.15
   Git commit:       8728dd2
   Built:            Fri Apr  9 22:45:40 2021
   OS/Arch:          windows/amd64
   Experimental:     false

 Docker Desktop V 3.3.3(64133)

***** fix1: Upgrade virtualbox from 5.2 to 6.1
This elimiated the error about : Stderr: VBoxManage.exe: error: Failed to open/create the internal network 'HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter #2' (VERR_INTNET_FLT_IF_NOT_FOUND).
However, there is now another issue.
As the transcript below shows, vagrant times out waiting for the machine to boot.

***** c:\cprojects\udemy\docker4.net\vagrant\05>vagrant up
Bringing machine 'manager' up with 'virtualbox' provider...
Bringing machine 'worker' up with 'virtualbox' provider...
Bringing machine 'worker2' up with 'virtualbox' provider...
Bringing machine 'winworker' up with 'virtualbox' provider...
==> manager: Checking if box 'bento/ubuntu-20.04' version '202105.25.0' is up to date...
==> manager: Clearing any previously set forwarded ports...
==> manager: Clearing any previously set network interfaces...
==> manager: Preparing network interfaces based on configuration...
    manager: Adapter 1: nat
    manager: Adapter 2: hostonly
==> manager: Forwarding ports...
    manager: 22 (guest) => 2222 (host) (adapter 1)
==> manager: Running 'pre-boot' VM customizations...
==> manager: Booting VM...
==> manager: Waiting for machine to boot. This may take a few minutes...
    manager: SSH address: 127.0.0.1:2222
    manager: SSH username: vagrant
    manager: SSH auth method: private key
Timed out while waiting for the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured ("config.vm.boot_timeout" value) time period.

If you look above, you should be able to see the error(s) that
Vagrant had when attempting to connect to the machine. These errors
are usually good hints as to what may be wrong.

If you're using a custom box, make sure that networking is properly
working and you're able to connect to the machine. It is a common
problem that networking isn't setup properly in these boxes.
Verify that authentication configurations are also setup properly,
as well.

If the box appears to be booting properly, you may want to increase
the timeout ("config.vm.boot_timeout") value.
*** simple vagrant startup
**** c:\tmp>vagrant init hashicorp/bionic64
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
**** c:\tmp>vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Box 'hashicorp/bionic64' could not be found. Attempting to find and install...
    default: Box Provider: virtualbox
    default: Box Version: >= 0
==> default: Loading metadata for box 'hashicorp/bionic64'
    default: URL: https://vagrantcloud.com/hashicorp/bionic64
==> default: Adding box 'hashicorp/bionic64' (v1.0.282) for provider: virtualbox
    default: Downloading: https://vagrantcloud.com/hashicorp/boxes/bionic64/versions/1.0.282/providers/virtualbox.box
    default:
==> default: Successfully added box 'hashicorp/bionic64' (v1.0.282) for 'virtualbox'!
==> default: Importing base box 'hashicorp/bionic64'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'hashicorp/bionic64' version '1.0.282' is up to date...
==> default: Setting the name of the VM: tmp_default_1623109119626_69301
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
Timed out while waiting for the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured ("config.vm.boot_timeout" value) time period.

If you look above, you should be able to see the error(s) that
Vagrant had when attempting to connect to the machine. These errors
are usually good hints as to what may be wrong.

If you're using a custom box, make sure that networking is properly
working and you're able to connect to the machine. It is a common
problem that networking isn't setup properly in these boxes.
Verify that authentication configurations are also setup properly,
as well.

If the box appears to be booting properly, you may want to increase
the timeout ("config.vm.boot_timeout") value.
** Initialize the Swarm

Swarm mode is a feature of the Docker Engine so you don't need to install any additional software.

_Connect to the manager VM and initialize the cluster:_

```
cd "$env:docker4dotnet/vagrant/05"

vagrant status

vagrant ssh manager

docker swarm init
```

> You now have a functional single-node Swarm. The output shows the command you run on other nodes to join the Swarm. 

_You can manage the other nodes from the manager:_

```
docker node ls

docker swarm join-token manager

docker swarm join-token worker

exit
```

** Join a Linux worker node

The manager runs the orchestration components. You add worker nodes to run your application containers. 

_Add a Linux worker node:_

```
vagrant ssh worker

ip a

# docker swarm join [join-token] --advertise-addr [ip address]
```

> Docker can work out the machine's IP address, but you should specify it if you have multiple addresses.

_Check the Docker Engine status:_

```
docker info

exit
```

** Join a Windows worker node

Docker Swarm works in the same way on Windows and Linux. You use the same join command, and Windows nodes can be managers or workers.

_Join the Windows node:_

```
# password :vagrant
vagrant ssh winworker

ipconfig

# docker swarm join [join-token] --advertise-addr [ip address]
```

** Run a simple app

Worker nodes just run your workloads, they're assigned work by the manager. You run `docker` commands on the manager and typically leave the workers alone.

_Check the Swarm setup:_

```
vagrant ssh manager

docker node ls

docker node inspect worker

docker node inspect winworker
```

You run apps in Swarm Mode as **services**, using the same compute abstraction as Compose. A service can run in one or more containers on any nodes.

_Deploy a basic web app:_

```
docker service create --name whoami -p 8080:80 docker4dotnet/whoami

docker service ps whoami

docker node inspect worker -f '{{.Status.Addr}}'

docker node inspect manager -f '{{.Status.Addr}}'
```

> There's a single container running the service, but you can browse to port `8080` on any node and the traffic gets routed to the container.

Scale up and more containers will be created. Publishing a port in Swarm mode uses the ingress network, so incoming requests get load-balanced between containers. 

_Update the service to scale up:_

```
docker service update --replicas 10 whoami

docker service ps whoami

url="$(docker node inspect winworker -f '{{.Status.Addr}}'):8080"

echo $url

curl $url
```

> This is a multi-architecture .NET Core image, so it can run on Windows or Linux. Repeat the curl command to see different OS responses.

_Check the logs and clear up:_

```
docker service logs whoami

docker service rm whoami

docker ps
```

Services are first-class citizens which you administer on the manager node. Swarm mode enables extra features in the Docker CLI, but you can only use them on the manager - typically you'd set up a remote connection.

** Modelling apps for Docker Swarm 

Now we have a cluster running and we've seen how services are created and deployed as containers on the nodes. 

Next we'll see how the Docker Compose format supports Swarm mode. You can model your applications to deploy them to the cluster and take full advantage of the orchestration features.
